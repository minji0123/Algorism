# NxM 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1 로 표시된다.
# 구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주함.
# 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림 개수를 구하는 프로그램 작성
####################################################

# 4 5
# 00110
# 00011
# 11111
# 00000
# 아이스크림 총 3개 생성

####################################################
# DFS 활용
# 특정 노드의 주변 상하좌우를 살펴본 뒤, 값이 0이면서 아직 방문하지 않은 지점을 방문한다.
# 방문한 지점에서 주변 상하좌우를 살펴보며 방문을 진행하는 과정을 반복하면, 연결된 모든 지점을 방문할 수 있다.
# 모든 노드에 대해 1~2번의 과정을 반복하며, 방문하지 않은 지점의 수를 카운트한다.
####################################################

# 어차피 1은 못가니까.... 0인애들을 찾아 ->  이동했던 0을 1로 변경해주면서 -> 움직

####################################################

# 얼음틀크기 값 입력받기
N, M = map(int, input().split())
# python map 은 포문으로 배열 출력하는거랑 비슷한데, 배열 안의 값을 특정 함수를 적용시켜서 출력하는거임

# 얼음틀모양 2차원 리스트로 입력받기
얼음틀 = []
for i in range(N):
    얼음틀.append(list(map(int, input())))


# 방문 처리 로직 (상하좌우 포함)
def dfs(x, y):
    # 얼음틀 범위를 벗어나면 종료
    if x <= -1 or x >= N or y <= -1 or y >= M:
        return False
    # 현재 노드를 아직 방문하지 않았다면
    # 해당 노드 방문 처리
    if 얼음틀[x][y] == 0:
        얼음틀[x][y] = 1
        # 현재 위치 기준으로 상하좌우 위치들을 모두 재귀적으로 호출해서, 방문처리ㄱㄱ
        dfs(x - 1, y)
        dfs(x, y - 1)
        dfs(x + 1, y)
        dfs(x - 1, y + 1)
        return True
    return False  # else 문인거야


# 초기값 세팅
result = 0

# 모든 노드(위치) 에 대하여 음료수 채우기
for n in range(N):
    for m in range(M):
        if dfs(n, m) == True:
            result += 1

print(result)


