# NxM 형태의 미로에 갇혔다. 미로에는 여러 마리의 괴물이 있어서 이를 피해 탈출해야 한다.
# 현재 위치는 1x1, 미로의 출구는 NxM, 한 번에 한 칸씩 이동할 수 있다.
# 괴물이 있는 부분은 0, 괴물이 없는 부분은 1

# 탈출하기 위해 움직여야 하는 최소 칸의 개수를 구하시오. 칸을 셀 때는 시작 칸과 마지막 칸을 모두 포함해서 계산함
####################################################

# 5 6
# 101010
# 111111
# 000001
# 111111
# 111111

# 10 번 움직이면 통과 ㄱㄴ
####################################################

# 큐 임포트
from collections import deque

# 미로크기 입력받기
n, m = map(int, input().split())

# 미로정보 2차원 리스트로 입력받기
미로 = []
for i in range(n):
    미로.append(list.map(int, input()))

# 이동방법 정의해놓음
이동방법 = [(-1, 0), (1, 0), (0, -1), (0, 1)]


# 미로길찾기 로직
def bfs(x, y):
    큐 = deque()
    큐.append((x, y))  # 파라미터룰 큐에 담는다.
    # 큐가 빌 때까지 반복하기
    while 큐:
        x, y = 큐.popleft() # 값 하나를 꺼내는 메소드
        # 현재 위치에서 네 방향으로 위치 확인
        for i in range(4):
            nx = x + 이동방법[i][0]
            ny = y + 이동방법[i][1]
            # 미로 공간 외의 범위는 무시
            if nx < 0 or nx >= n or ny < 0 or ny >= m:
                continue
            # 괴물 무시
            if 미로[nx][ny] == 0:
                continue
            # 해당 노드를 처음 방문한 경우에만 이동 거리로 기록
            if 미로[nx][ny] == 1:
                미로[nx][ny] = 미로[x][y] + 1
                큐.append((nx, ny))
    # 가장 오른쪽 아래까지 최단 거리 반환
    return 미로[n - 1][m - 1]


print(bfs(0, 0))
