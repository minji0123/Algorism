# 공포도가 x 인 모험가는 반드시 x 명 이상으로 구성한 모험가 그룹에 참여해야 한다.
# n 명의 모험가에 대한 정보가 주어졌을때, 여행을 떠날 수 있는 그룹 수의 최댓값을 구하는 프로그램
# 몇 명의 모험가는 마을에 남아있어도 된다.

# n = 5, 각 모험가의 공포도: [2 3 1 2 2] =? 123  22  2개의 그룹

####################################################
# 5
# 2 3 1 2 2
# 공포도를 오름차순 정렬 한 후, 공포도가 가장 낮은 모험가부터 하나씩 확인한다.
# 앞에서부터 공포도를 하나씩 확인하며, 현재 그룹에 포함된 모험가의 수가 현재 확인하고 있는 공포도보다 크거나 같다면 이를 그룹으로 설정한다.
    # 오름차순 되어있기 때문에 항상 최소한의 모험가 수만 포함해서 그룹을 만들 수 있다.
####################################################

# 모험가 수
n = int(input())
# 공포도 배열
x = list(map(int, input().split()))

# 공포도를 오름차순 정렬한다.
x.sort()

# 그룹 수, 모험가 수 선언
count_group = 0
count_adventure = 0

# 공포도를 낮은 것부터 하나씩 확인하며 (정렬 되어있어서 가능)
for i in x:
    # 현재 그룹에 해당 모험가를 포함시키기
    count_adventure += 1
    # 현재 그룹에 포함된 모험가의 수가 현재의 공포도 이상이라면 그룹 결성
    if count_adventure >= x:
        count_group += 1
    # 현재 그룹에 포함된 모험가 수 초기화
    count_adventure = 0

# 총 그룹 수 출력
print(count_group)

####################################################
#  map 은 리스트의 요소를 지정된 함수로 처리해주는 함수

# 실수가 저장된 리스트가 있을 때 이 리스트의 모든 요소를 정수로 변환
# >>> a = [1.2, 2.5, 3.7, 4.6]
# >>> for i in range(len(a)):
# ...     a[i] = int(a[i])
# ...
# >>> a
# [1, 2, 3, 4]
#
# >>> a = [1.2, 2.5, 3.7, 4.6]
# >>> a = list(map(int, a))
# >>> a
# [1, 2, 3, 4]